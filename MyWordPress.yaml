---
AWSTemplateFormatVersion: '2010-09-09'

Description:  Sets up an EFS and an RDS for the wordpress site.
#              Uses an installer EC2 to install and configure the wordpress solution. 
#              Sets up the framework required to provide the WP site service, in terms of Launch template for WP servers,
#              TG, ASG and ALB.
#
# notes regarding intrisic functions used:  (to make sure I don't loose them)
#   !Xx id´s the short form of Fn::Xx
#   !Ref      - Returns the value of the specified parameter or resource. 
#   !Sub      - Substitutes variables in an input string with values that you specify.
#   !Join     - Appends a set of values into a single value, separated by the specified delimiter.
#               Format:  !Join [ delimiter, [ comma-delimited list of values ] ]
#   !GetAZs   - Returns an array that lists Availability Zones for a specified region in alphabetical order.
#   !Select   - Returns a single object from a list of objects by index.
#   !GetAtt  - Returns the value of an attribute from a resource in the template. 
#               Format: !GetAtt logicalNameOfResource.attributeName


Parameters:
  MyVpc:
    Description: The virtual private cloud to operate in
    Type: String
    Default: "vpc-b39a45ca"

  MyPubSubn1:
    Description: The 1st public subnet
    Type: String
    Default: "subnet-25f8f143"

  MyPubSubn2:
    Description: The 2nd public subnet
    Type: String
    Default: "subnet-91051dd9"

  DevEnvCIDR:
    Description: The IP range of the development environments with allowed tcp/ssh access. In CIDR notation.
    Type: String
    Default: 0.0.0.0/0
#    Default: 172.31.16.22/32

  WpMasterUser:
    Description: The wordpress master user for initial logon
    Type: String
    Default: "admin"

  WpMasterPw:
    Description: The wordpress master user for initial logon
    Type: String
    Default: "loTTards"

  WpUser:
    Description: The wordpress server user for initial logon
    Type: String
    Default: "wpLotta"

  WpPw:
    Description: The wordpress server user for initial logon
    Type: String
    Default: "loTTaWp123"

  KeyPairKey:
    Description: The key to use for Webservers and Installer server.
    Type: String
    Default: MyBestKey

Resources:

#------------------------- D A T A   B A S E    R E S O U R C E S -------------------------------

  FrEndDbSecGrp:
    Description: A security group for db access. 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB frontend access
      GroupName: !Sub "DBfrontAccess-${AWS::StackName}"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !GetAtt WebAppSecGrp.GroupId

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'         # MariaDB range 20-65536
      DBInstanceClass: db.t2.micro   # Free Tier
      Engine: MariaDB                # byt till mariadb
#    EngineVersion 10.2
      MasterUsername: !Ref WpMasterUser
      MasterUserPassword: !Ref WpMasterPw
      BackupRetentionPeriod: 0       # 0 to disable backup
      DBName: "wordpress"
      MultiAZ: true
      DBSubnetGroupName: !Ref MyDBSubnGrp
      VPCSecurityGroups:             # The recommended attribute to set sec groups for rds
      - !GetAtt FrEndDbSecGrp.GroupId

  MyDBSubnGrp: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: DB subnet for WP users
      DBSubnetGroupName: !Sub "WordPressSubNet-${AWS::StackName}"
      SubnetIds: 
      - !Ref MyPubSubn1
      - !Ref MyPubSubn2
      Tags: 
      - Key: Name
        Value: "Subnets for DB instances"


#------------------------- S H A R E D    F I L E      S Y S T E M    R E S O U R C E S --------------

  EfsSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: DISABLED 
      PerformanceMode: generalPurpose
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemTags:
        - Key: "Name"
          Value: "AnnsEfs"

  EfsBaseSecGrp:
    Description: A security group for the EFS storage. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub "Base NFS access in ${MyVpc} (tcp via port 2049)"
      GroupName: !Join [ -, [ 'EfsBaseSecGrp', !Ref 'AWS::StackName' ]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: 0.0.0.0/0 
      VpcId: !Ref MyVpc
      Tags:
        - Key: "Name"
          Value: "EFS access base group"

  EfsLimSecGrp:
    Description: A security group for the EFS storage. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Enable limited NFS access in ${MyVPC} (tcp via port 2049)"
      GroupName: !Join [ -, [ 'EfsLimSecGrp', !Ref 'AWS::StackName' ]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !GetAtt EfsBaseSecGrp.GroupId
      VpcId: !Ref MyVpc
      Tags:
        - Key: "Name"
          Value: "EFS access base group"

  MntTarg1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsSystem
      SubnetId: !Ref MyPubSubn1
      SecurityGroups:
        - !Ref EfsLimSecGrp

  MntTarg2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsSystem
      SubnetId: !Ref MyPubSubn2
      SecurityGroups:
        - !Ref EfsLimSecGrp


#------------------------- A P P L I C A T I O N    R E S O U R C E S --------------

  DevSecGrp:  
    Description: A security group for developers access. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Developers access"
      GroupName: !Sub "DevAcces-${AWS::StackName}"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: "Name"
        Value: "Webserver access"

  WebSecGrp:
    Description: A security group web access. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable open HTTP and HTTPS access
      GroupName: !Sub "WebAcces-${AWS::StackName}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0   # from anywhere
      VpcId: !Ref MyVpc
      Tags:
        - Key: "Name"
          Value: "WebSecGrp"

  WebAppSecGrp:
    Description: A security group for forwarded web access. 
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable forwarded web access.
      GroupName: !Sub "WebAppAcces-${AWS::StackName}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt WebSecGrp.GroupId
      VpcId: !Ref MyVpc
      Tags:
        - Key: "Name"
          Value: "WebAppSecGrp"

  AnnsASG:
    Description: An ASG that launches the webservers with 'AnnsLaunchTemplate'and connects to 'AnnsTargetGroup'
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub "AnnsASG-${AWS::StackName}"
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      LaunchTemplate:
        LaunchTemplateId: !Ref AnnsLaunchTemplate
        Version: !GetAtt AnnsLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: "Name"
          Value: "WordPressServer"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref MyPubSubn1
        - !Ref MyPubSubn2
      TargetGroupARNs:
        - !Ref AnnsTargetGroup

  AnnsTargetGroup:
    Description: A target group in this VPC for the autoscaled webservers.
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      VpcId: !Ref MyVpc
      Name: !Sub "AnnsTG-${AWS::StackName}"

  AnnsALB:
    Description: An Application load balancer 
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: Installer
    Properties: 
      Name: !Sub "AnnsALB-${AWS::StackName}"
      Type: "application"
      Scheme: "internet-facing"
      IpAddressType: "ipv4"
      Subnets: 
      - !Ref MyPubSubn1
      - !Ref MyPubSubn2
      SecurityGroups: 
      - !Ref WebSecGrp
#      - !GetAtt WebSecGrp.GroupId

  MyListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref AnnsALB
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - Order: 1
          TargetGroupArn: !Ref AnnsTargetGroup
          Type: "forward"

  Installer: 
    Type: AWS::EC2::Instance
    DependsOn: MyDB
    Properties: 
      ImageId: 'ami-096f43ef67d75e998'
      InstanceType: t2.micro
      UserData: 
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -x
            yum update -y
            yum install amazon-efs-utils -y
            mkdir -p /var/www
            # -- efterson db tar lång tid att komma upp sleep 120
            echo "${EfsSystem}:/ /var/www efs _netdev,tls 0 0" | tee -a /etc/fstab
            mount -a
            echo "1 - efsMounted" | tee /home/ec2-user/UserDataLog.txt
            #--- install, start and persist the Apache web server
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "2 - Apache started" | tee -a /home/ec2-user/UserDataLog.txt
            #--- setup the wordpress initial data only from one server
            #--- ladda ned konifurationsfiler, modifiera för siten och lägg på plats
            echo "3 - At point of wget" | tee -a /home/ec2-user/UserDataLog.txt
            cd /home/ec2-user
            wget https://wordpress.org/latest.tar.gz
            echo "4 - After wget" | tee -a /home/ec2-user/UserDataLog.txt
            tar -xzf latest.tar.gz
            cd wordpress
            cp wp-config-sample.php wp-config.php
            # MYIP=$(hostname -i)
            sed -i -e "s/database_name_here/wordpress/;s/username_here/${WpUser}/;s/password_here/${WpPw}/;s/localhost/${DbEndPoint}/" wp-config.php
            # sed -i -e "s/database_name_here/wordpress/;s/username_here/lotta/;s/password_here/loTTa123/" wp-config.php
            echo "5 - WP config file modified" | tee -a /home/ec2-user/UserDataLog.txt
            # here should also replace the security key
            #--- skapa en användare åt wordpress i databasen - GRANT ALL tillåts inte så plockat isär --
            echo "6 - At point of creating WP db user" | tee -a /home/ec2-user/UserDataLog.txt
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            # yum install -y mariadb
            MYSQL_HOST=${DbEndPoint}
            Q1="CREATE USER '${WpUser}' IDENTIFIED BY '${WpPw}';"
            Q2="GRANT SELECT,INSERT,DELETE,CREATE,UPDATE,ALTER ON wordpress.* TO '${WpUser}';"
            Q3="FLUSH PRIVILEGES;"
            SQLOP="$Q1$Q2$Q3"
            echo "7 - db op sträng: $SQLOP" | tee -a  /home/ec2-user/UserDataLog.txt
            echo "8 - db endpoint: ${DbEndPoint}" | tee -a  /home/ec2-user/UserDataLog.txt
            mysql --host="${DbEndPoint}" --user="${WpMasterUser}" --password="${WpMasterPw}" --execute="$SQLOP"
            echo "9 - At point of deploying WP" | tee -a /home/ec2-user/UserDataLog.txt
            # deploy
            cd /home/ec2-user
            cp -r wordpress/* /var/www/html/
            #--- make sure user can fully access files in directory
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www && find /var/www -type d -exec chmod 2775 {} \;
            systemctl restart httpd
            echo "10 - Made it to the end" | tee -a /home/ec2-user/UserDataLog.txt
            echo "Database operation remaining to add the Wordpress user." | tee /home/ec2-user/Readme.txt
            echo -e "Cut and paste following text and enter it on the in the terminal:\n" | tee -a /home/ec2-user/Readme.txt
            echo -e "mysql --host="${DbEndPoint}" --user="${WpMasterUser}" --password="${WpMasterPw}" --execute=$SQLOP" | tee -a /home/ec2-user/Readme.txt
            #---cleanup installation files
          - DbEndPoint: !GetAtt MyDB.Endpoint.Address
      Tags:
        - Key: "Name"
          Value: !Sub "Installer of WordPress Site"
      SubnetId: !Ref MyPubSubn1
      KeyName: !Ref KeyPairKey
      SecurityGroupIds:
        - !GetAtt DevSecGrp.GroupId
        - !GetAtt WebAppSecGrp.GroupId
        - !GetAtt EfsBaseSecGrp.GroupId

  AnnsLaunchTemplate:
    Description: A template for the webserver EC2s that displays a welcome page with a name on - specified by parameter 
                 'NameOnPage', the date and time of creation and a random number 1-10 (just to help tell them apart).
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-wordpress-server'
      LaunchTemplateData:
        ImageId: 'ami-096f43ef67d75e998'
        InstanceType: t2.micro
        UserData: 
          Fn::Base64:
            !Sub |
              #!/bin/bash -x
              yum update -y
              yum install amazon-efs-utils -y
              mkdir -p /var/www
              echo "${EfsSystem}:/ /var/www efs _netdev,tls 0 0" | tee -a /etc/fstab
              mount -a
              #--- add lamp stack
              yum update -y
              amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
              yum install -y httpd mariadb-server
              systemctl start httpd
              systemctl enable httpd
        KeyName: !Ref KeyPairKey
        SecurityGroupIds: 
        - !GetAtt DevSecGrp.GroupId
        - !GetAtt WebAppSecGrp.GroupId
        - !GetAtt EfsBaseSecGrp.GroupId
        Monitoring: 
          Enabled: true

Outputs:

  EFS:
    Description: A reference to the filesystem
    Value: !Ref EfsSystem

  MntTrg1:
    Description: A reference to the EFS mount target of AZ1
    Value: !Ref MntTarg1

  MntTrg2:
    Description: A reference to the EFS mount target of AZ2
    Value: !Ref MntTarg2

  EFSbaseSecurityGroup:
    Description: A reference to the base EFS security group for EFS users
    Value: !Ref EfsBaseSecGrp

  EFSlimitedSecurityGroup:
    Description: A reference to the limited EFS security group for EFS self
    Value: !Ref EfsLimSecGrp

  RDS:
    Description: A reference to the Database
    Value: !Ref MyDB

  RDSDBSUBNGRP:
    Description: A reference to the Database Subnet Group
    Value: !Ref MyDBSubnGrp
